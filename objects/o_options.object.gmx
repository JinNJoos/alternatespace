<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_options</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0
create = 1
hspeed = -3
alarm[0] = 12

emit = audio_emitter_create();
audio_emitter_position(emit,0,0,100);
audio_emitter_gain(emit,(global.master/100)*(global.effect/100));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = r_title)
{
    instance_create(150,300,o_endgame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &lt; 1)
{
    image_alpha += 0.01
}
friction = 0.1
if (speed = 0)
{
    if (create = 1)
    {
        a = instance_create(x,y,o_menuover)
        with (a)
        {
            click = false;
        }
    }
    create = 0
    x = (round(x));
    if (room = r_graphics)
    or (room = r_sounds)
    or (room = r_controls)
    {
        if not (instance_exists(o_mainmenuarrow))
        {
            instance_create(x,y,o_mainmenuarrow);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed = 0)
{
    create = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed &gt; 0)
{
    create = 1
}
if (speed = 0)
{
    if not (instance_exists(o_menufade))
    {
        a = instance_create(x,y,o_menuover)
        with (a)
        {
            click = false;
        }
        d = audio_play_sound_on(emit,f_select,false,10);
    }
    if (instance_exists(o_mainmenuarrow))
    {
        with (o_mainmenuarrow)
        {
            controller = 'mouse';
            if (room = r_title)
            {
                selection = 'title options';
            }
            if (room = r_graphics)
            {
                selection = 'graphics options';
            }
            if (room = r_sounds)
            {
                selection = 'sounds options';
            }
            if (room = r_controls)
            {
                selection = 'controls options';
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed = 0)
{
    if not (room = r_title)
    {
        ini_open("setup.ini");
        
        if (room = r_controls)
        {
            if not(instance_exists(o_keycontrol))
            {
                global.p1_move_up = o_key_up_p1.key;
                ini_write_real("P1Controls","Up",global.p1_move_up);
                global.p1_move_down = o_key_down_p1.key;
                ini_write_real("P1Controls","Down",global.p1_move_down);
                global.p1_move_left = o_key_left_p1.key;
                ini_write_real("P1Controls","Left",global.p1_move_left);
                global.p1_move_right = o_key_right_p1.key;
                ini_write_real("P1Controls","Right",global.p1_move_right);
                global.p1_tech_a = o_key_skilla_p1.key;
                ini_write_real("P1Controls","AttackA",global.p1_tech_a);
                global.p1_tech_b = o_key_skillb_p1.key;
                ini_write_real("P1Controls","AttackB",global.p1_tech_b);
                global.p1_tech_c = o_key_skillc_p1.key;
                ini_write_real("P1Controls","AttackC",global.p1_tech_c);
                global.p1_dash = o_key_dash_p1.key;
                ini_write_real("P1Controls","Dash",global.p1_dash);
                global.p1_guard = o_key_guard_p1.key;
                ini_write_real("P1Controls","Guard",global.p1_guard);
                global.p1_shift = o_key_switch_p1.key;
                ini_write_real("P1Controls","Switch",global.p1_shift);
                
                global.p2_move_up = o_key_up_p2.key;
                ini_write_real("P2Controls","Up",global.p2_move_up);
                global.p2_move_down = o_key_down_p2.key;
                ini_write_real("P2Controls","Down",global.p2_move_down);
                global.p2_move_left = o_key_left_p2.key;
                ini_write_real("P2Controls","Left",global.p2_move_left);
                global.p2_move_right = o_key_right_p2.key;
                ini_write_real("P2Controls","Right",global.p2_move_right);
                global.p2_tech_a = o_key_skilla_p2.key;
                ini_write_real("P2Controls","AttackA",global.p2_tech_a);
                global.p2_tech_b = o_key_skillb_p2.key;
                ini_write_real("P2Controls","AttackB",global.p2_tech_b);
                global.p2_tech_c = o_key_skillc_p2.key;
                ini_write_real("P2Controls","AttackC",global.p2_tech_c);
                global.p2_dash = o_key_dash_p2.key;
                ini_write_real("P2Controls","Dash",global.p2_dash);
                global.p2_guard = o_key_guard_p2.key;
                ini_write_real("P2Controls","Guard",global.p2_guard);
                global.p2_shift = o_key_switch_p2.key;
                ini_write_real("P2Controls","Switch",global.p2_shift);
                
                global.p1p_move_up = o_key_up_p1.pad;
                ini_write_real("P1Gamepad","Up",global.p1p_move_up);
                global.p1p_move_down = o_key_down_p1.pad;
                ini_write_real("P1Gamepad","Down",global.p1p_move_down);
                global.p1p_move_left = o_key_left_p1.pad;
                ini_write_real("P1Gamepad","Left",global.p1p_move_left);
                global.p1p_move_right = o_key_right_p1.pad;
                ini_write_real("P1Gamepad","Right",global.p1p_move_right);
                global.p1p_tech_a = o_key_skilla_p1.pad;
                ini_write_real("P1Gamepad","AttackA",global.p1p_tech_a);
                global.p1p_tech_b = o_key_skillb_p1.pad;
                ini_write_real("P1Gamepad","AttackB",global.p1p_tech_b);
                global.p1p_tech_c = o_key_skillc_p1.pad;
                ini_write_real("P1Gamepad","AttackC",global.p1p_tech_c);
                global.p1p_dash = o_key_dash_p1.pad;
                ini_write_real("P1Gamepad","Dash",global.p1p_dash);
                global.p1p_guard = o_key_guard_p1.pad;
                ini_write_real("P1Gamepad","Guard",global.p1p_guard);
                global.p1p_shift = o_key_switch_p1.pad;
                ini_write_real("P1Gamepad","Switch",global.p1p_shift);
                
                global.p2p_move_up = o_key_up_p2.pad;
                ini_write_real("P2Gamepad","Up",global.p2p_move_up);
                global.p2p_move_down = o_key_down_p2.pad;
                ini_write_real("P2Gamepad","Down",global.p2p_move_down);
                global.p2p_move_left = o_key_left_p2.pad;
                ini_write_real("P2Gamepad","Left",global.p2p_move_left);
                global.p2p_move_right = o_key_right_p2.pad;
                ini_write_real("P2Gamepad","Right",global.p2p_move_right);
                global.p2p_tech_a = o_key_skilla_p2.pad;
                ini_write_real("P2Gamepad","AttackA",global.p2p_tech_a);
                global.p2p_tech_b = o_key_skillb_p2.pad;
                ini_write_real("P2Gamepad","AttackB",global.p2p_tech_b);
                global.p2p_tech_c = o_key_skillc_p2.pad;
                ini_write_real("P2Gamepad","AttackC",global.p2p_tech_c);
                global.p2p_dash = o_key_dash_p2.pad;
                ini_write_real("P2Gamepad","Dash",global.p2p_dash);
                global.p2p_guard = o_key_guard_p2.pad;
                ini_write_real("P2Gamepad","Guard",global.p2p_guard);
                global.p2p_shift = o_key_switch_p2.pad;
                ini_write_real("P2Gamepad","Switch",global.p2p_shift);
            }
        }
        
        if (room = r_sounds)
        {
            global.master = o_soundslide_master.percentage;
            ini_write_real("Volume","Master",global.master);
            global.effect = o_soundslide_effect.percentage;
            ini_write_real("Volume","Effect",global.effect);
            global.voice = o_soundslide_voice.percentage;
            ini_write_real("Volume","Voice",global.voice);
            global.music = o_soundslide_music.percentage;
            ini_write_real("Volume","Music",global.music);
        }
        
        if (room = r_graphics)
        {
            ini_write_string("Graphics","Particles",global.particles);
            ini_write_string("Graphics","Interface",global.interface);
            ini_write_string("Graphics","Grid",global.grid);
            ini_write_string("Graphics","Directionals",global.directionals);
            ini_write_string("Graphics","Coordinates",global.coordinates);
            ini_write_string("Graphics","Speedometer",global.speedometer);
            ini_write_string("Graphics","Moveset",global.moveset);
            ini_write_string("Graphics","Status",global.status);
        }
        
        ini_close();
        d = audio_play_sound_on(emit,f_confirm,false,10);
        room_goto(r_options);
    }
        
    if (room = r_title)
    {
        if not (instance_exists(o_menufade))
        {
            d = audio_play_sound_on(emit,f_confirm,false,10);
            room_goto(r_options);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
