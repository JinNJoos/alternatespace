<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_axis_deadzone(0, 0.1);
gamepad_set_button_threshold(0, 0.5);

gamepad_set_axis_deadzone(1, 0.1);
gamepad_set_button_threshold(1, 0.5);

ini_open("setup.ini");

global.master = ini_read_real("Volume","Master",100);
global.effect = ini_read_real("Volume","Effect",80);
global.voice = ini_read_real("Volume","Voice",90);
global.music = ini_read_real("Volume","Music",70);

global.particles = ini_read_string("Graphics","Particles","On");
global.interface = ini_read_string("Graphics","Interface","Full");
global.grid = ini_read_string("Graphics","Grid","Medium");
global.directionals = ini_read_string("Graphics","Directionals","On");
global.coordinates = ini_read_string("Graphics","Coordinates","On");
global.speedometer = ini_read_string("Graphics","Speedometer","On");
global.moveset = ini_read_string("Graphics","Moveset","On");
global.status = ini_read_string("Graphics","Status","On");

global.p1_move_up = ini_read_real("P1Controls","Up",keyboard_get_map(ord('W')));
global.p1_move_left = ini_read_real("P1Controls","Left",keyboard_get_map(ord('A')));
global.p1_move_down = ini_read_real("P1Controls","Down",keyboard_get_map(ord('S')));
global.p1_move_right = ini_read_real("P1Controls","Right",keyboard_get_map(ord('D')));
global.p1_tech_a = ini_read_real("P1Controls","AttackA",keyboard_get_map(ord('F')));
global.p1_tech_b = ini_read_real("P1Controls","AttackB",keyboard_get_map(ord('G')));
global.p1_tech_c = ini_read_real("P1Controls","AttackC",keyboard_get_map(ord('T')));
global.p1_dash = ini_read_real("P1Controls","Dash",keyboard_get_map(ord('H')));
global.p1_guard = ini_read_real("P1Controls","Guard",keyboard_get_map(ord('R')));
global.p1_shift = ini_read_real("P1Controls","Switch",keyboard_get_map(ord('Y')));

global.p2_move_up = ini_read_real("P2Controls","Up",keyboard_get_map(vk_up));
global.p2_move_left = ini_read_real("P2Controls","Left",keyboard_get_map(vk_left));
global.p2_move_down = ini_read_real("P2Controls","Down",keyboard_get_map(vk_down));
global.p2_move_right = ini_read_real("P2Controls","Right",keyboard_get_map(vk_right));
global.p2_tech_a = ini_read_real("P2Controls","AttackA",keyboard_get_map(vk_numpad1));
global.p2_tech_b = ini_read_real("P2Controls","AttackB",keyboard_get_map(vk_numpad2));
global.p2_tech_c = ini_read_real("P2Controls","AttackC",keyboard_get_map(vk_numpad5));
global.p2_dash = ini_read_real("P2Controls","Dash",keyboard_get_map(vk_numpad3));
global.p2_guard = ini_read_real("P2Controls","Guard",keyboard_get_map(vk_numpad4));
global.p2_shift = ini_read_real("P2Controls","Switch",keyboard_get_map(vk_numpad6));

global.p1p_move_up = ini_read_real("P1Gamepad","Up",gp_padu);
global.p1p_move_left = ini_read_real("P1Gamepad","Left",gp_padl);
global.p1p_move_down = ini_read_real("P1Gamepad","Down",gp_padd);
global.p1p_move_right = ini_read_real("P1Gamepad","Right",gp_padr);
global.p1p_tech_a = ini_read_real("P1Gamepad","AttackA",gp_face3);
global.p1p_tech_b = ini_read_real("P1Gamepad","AttackB",gp_face4);
global.p1p_tech_c = ini_read_real("P1Gamepad","AttackC",gp_face2);
global.p1p_dash = ini_read_real("P1Gamepad","Dash",gp_face1);
global.p1p_guard = ini_read_real("P1Gamepad","Guard",gp_shoulderl);
global.p1p_shift = ini_read_real("P1Gamepad","Switch",gp_shoulderr);

global.p2p_move_up = ini_read_real("P2Gamepad","Up",gp_padu);
global.p2p_move_left = ini_read_real("P2Gamepad","Left",gp_padl);
global.p2p_move_down = ini_read_real("P2Gamepad","Down",gp_padd);
global.p2p_move_right = ini_read_real("P2Gamepad","Right",gp_padr);
global.p2p_tech_a = ini_read_real("P2Gamepad","AttackA",gp_face3);
global.p2p_tech_b = ini_read_real("P2Gamepad","AttackB",gp_face4);
global.p2p_tech_c = ini_read_real("P2Gamepad","AttackC",gp_face2);
global.p2p_dash = ini_read_real("P2Gamepad","Dash",gp_face1);
global.p2p_guard = ini_read_real("P2Gamepad","Guard",gp_shoulderl);
global.p2p_shift = ini_read_real("P2Gamepad","Switch",gp_shoulderr);

ini_close();

sound_global_volume(global.master/100)
global.s_effect = audio_emitter_create()
global.s_voice = audio_emitter_create()
global.s_music = audio_emitter_create()

draw_set_font(font0);

//write your messages in an array, starting at 0, like so
message[0]="There always existed an alternate dimension.#(Press Space to continue)"
message[1]="In this dimension, supernatural powers are available to those with imagination."
message[2]="It was only recently that humans discovered the existence of an alternate dimension."
message[3]="They now have knowledge to create alternate spaces for environmental uses."
message[4]="Some, however, do not need to create alternate spaces to use their powers."
message[5]="Those with evil thoughts... are dangerous..."

message_current=0; //0 is the first number, and the message we are currently at
message_end=5; //6 is the last number in our array
message_draw=""; //this is what we 'write' out. It's blank right now
increase=0.5; //the speed at which new characters are added
characters=0; //how many characters have already been drawn

message_length=string_length(message[message_current]); //number of chars in message
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (characters&lt;message_length)
{ //if current character count is less than the amount in current message
    if (string_char_at(message_draw,characters) = ".")
    or (string_char_at(message_draw,characters) = ",")
    or (string_char_at(message_draw,characters) = "!")
    or (string_char_at(message_draw,characters) = "?")
    {
        characters+=increase/4
    } 
    characters+=increase
    if keyboard_check_pressed(vk_space)
    {
        characters=message_length;
    }
    message_draw=string_copy(message[message_current],0,characters); //copy string to current character
}
else
{ //if current character is more than the amount in the current message
    if keyboard_check_pressed(vk_space)
    { //if we press the spacebar
        if message_current&lt;message_end
        { //if there are more messages left to show (0 -&gt; 6, in our case)
            message_current+=1; //increase the message by 1
            message_length=string_length(message[message_current]); //get the new character length for message
            characters=0; //set the characters back to 0
            message_draw=""; //clear the drawn text
        }
        else
        { //if our messages are done
            room_goto_next();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text(x,y,string_copy(message_draw,1,characters),18,view_wview-(x+32),c_white,c_gray);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
