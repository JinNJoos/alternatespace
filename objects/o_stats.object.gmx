<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pointer = 0
distance = point_distance(o_p1.x,o_p1.y,o_p2.x,o_p2.y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distance = round(point_distance(o_p1.x,o_p1.y,o_p2.x,o_p2.y));
if (player = 1)
{
    pointer = point_direction(o_p1.x,o_p1.y,o_p2.x,o_p2.y);
}
if (player = 2)
{
    pointer = point_direction(o_p2.x,o_p2.y,o_p1.x,o_p1.y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
if (player = 1)
{
    draw_set_alpha(0.4);
    if (global.interface = "Circular")
    or (global.interface = "Full")
    {
        Gauge(o_p1.x,o_p1.y,43,15,300,300,0,180*(global.p1hp/300),1,c_red);
        Gauge(o_p1.x,o_p1.y,43,15,300,300,0,180*(global.p1tp/300),-1,c_aqua);
    }
    draw_set_alpha(0.8);
    draw_set_color(c_orange);
    if (global.interface = "Circular")
    or (global.interface = "Full")
    {
        draw_text(o_p1.x,o_p1.y-50,floor(global.p1hp));
    }
    if (global.speedometer = "On")
    {
        draw_text(o_p1.x,o_p1.y+35,string(abs(round(o_p1.speed*2)))+" km/h");
    }
    if (global.directionals = "On")
    {
        draw_text(o_p1.x+lengthdir_x(40+(distance*0.15),pointer),o_p1.y+lengthdir_y(40+(distance*0.15),pointer),string(round(distance/30))+" m");
    }
    draw_set_color(c_white);
    if (global.interface = "Circular")
    or (global.interface = "Full")
    {
        draw_text(o_p1.x,o_p1.y+50,floor(global.p1tp));
    }
    if (global.status = "On")
    {
        draw_text(o_p1.x,o_p1.y-35,string(o_p1.mode));
    }
    draw_set_color(c_lime);
    if (global.coordinates = "On")
    {
        draw_text(o_p1.x-35,o_p1.y,"x:"+string(round((o_p1.x-1000)/10)));
        draw_text(o_p1.x+35,o_p1.y,"y:"+string(round((-o_p1.y+1000)/10)));
    }
    
    if (global.directionals = "On")
    {
        draw_sprite_ext(s_statarrow,-1,o_p1.x,o_p1.y,1+(o_p1.speed/30),1+(o_p1.speed/30),o_p1.direction,c_white,0.4)
        draw_sprite_ext(s_statrarrow,-1,o_p1.x,o_p1.y,1+(point_distance(o_p1.x,o_p1.y,o_p2.x,o_p2.y)/500),1+(point_distance(o_p1.x,o_p1.y,o_p2.x,o_p2.y)/500),point_direction(o_p1.x,o_p1.y,o_p2.x,o_p2.y),c_white,0.4)
    }
    draw_set_alpha(1);
}
if (player = 2)
{
    draw_set_alpha(0.4);
    if (global.interface = "Circular")
    or (global.interface = "Full")
    {
        Gauge(o_p2.x,o_p2.y,43,15,300,300,180,180*(global.p2hp/300),-1,c_red);
        Gauge(o_p2.x,o_p2.y,43,15,300,300,180,180*(global.p2tp/300),1,c_aqua);
    }
    draw_set_alpha(0.8);
    draw_set_color(c_orange);
    if (global.interface = "Circular")
    or (global.interface = "Full")
    {
        draw_text(o_p2.x,o_p2.y-50,floor(global.p2hp));
    }
    if (global.speedometer = "On")
    {
        draw_text(o_p2.x,o_p2.y+35,string(abs(round(o_p2.speed*2)))+" km/h");
    }
    if (global.directionals = "On")
    {
        draw_text(o_p2.x+lengthdir_x(40+(distance*0.15),pointer),o_p2.y+lengthdir_y(40+(distance*0.15),pointer),string(round(distance/30))+" m");
    }
    draw_set_color(c_white);
    if (global.interface = "Circular")
    or (global.interface = "Full")
    {
        draw_text(o_p2.x,o_p2.y+50,floor(global.p2tp));
    }
    if (global.status = "On")
    {
        draw_text(o_p2.x,o_p2.y-35,string(o_p2.mode));
    }
    draw_set_color(c_lime);
    if (global.coordinates = "On")
    {
        draw_text(o_p2.x-35,o_p2.y,"x:"+string(round((o_p2.x-1000)/10)));
        draw_text(o_p2.x+35,o_p2.y,"y:"+string(round((-o_p2.y+1000)/10)));
    }
    
    if (global.directionals = "On")
    {
        draw_sprite_ext(s_statarrow,-1,o_p2.x,o_p2.y,1+(o_p2.speed/30),1+(o_p2.speed/30),o_p2.direction,c_white,0.4)
        draw_sprite_ext(s_statrarrow,-1,o_p2.x,o_p2.y,1+(point_distance(o_p2.x,o_p2.y,o_p1.x,o_p1.y)/500),1+(point_distance(o_p2.x,o_p2.y,o_p1.x,o_p1.y)/500),point_direction(o_p2.x,o_p2.y,o_p1.x,o_p1.y),c_white,0.4)
    }
    draw_set_alpha(1);
}
if (player = 3)
{
    draw_set_alpha(0.4);
    Gauge(o_p1tutorial.x,o_p1tutorial.y,43,15,300,300,180,180*(global.p1hp/300),-1,c_red);
    Gauge(o_p1tutorial.x,o_p1tutorial.y,43,15,300,300,180,180*(global.p1tp/300),1,c_aqua);
    draw_set_alpha(0.8);
    draw_set_color(c_orange);
    draw_text(o_p1tutorial.x,o_p1tutorial.y-50,floor(global.p1hp));
    draw_set_color(c_white);
    draw_text(o_p1tutorial.x,o_p1tutorial.y+50,floor(global.p1tp));
    draw_text(o_p1tutorial.x,o_p1tutorial.y-35,string(o_p1tutorial.mode));
    draw_set_alpha(1);
}
if (player = 4)
{
    draw_set_alpha(0.4);
    Gauge(o_p2tutorial.x,o_p2tutorial.y,43,15,300,300,180,180*(global.p2hp/300),-1,c_red);
    Gauge(o_p2tutorial.x,o_p2tutorial.y,43,15,300,300,180,180*(global.p2tp/300),1,c_aqua);
    draw_set_alpha(0.8);
    draw_set_color(c_orange);
    draw_text(o_p2tutorial.x,o_p2tutorial.y-50,floor(global.p2hp));
    draw_set_color(c_white);
    draw_text(o_p2tutorial.x,o_p2tutorial.y+50,floor(global.p2tp));
    draw_text(o_p2tutorial.x,o_p2tutorial.y-35,string(o_p2tutorial.mode));
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
