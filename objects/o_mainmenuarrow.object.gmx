<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_mainmenuarrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>emit = audio_emitter_create();
audio_emitter_position(emit,0,0,100);
audio_emitter_gain(emit,(global.master/100)*(global.effect/100));

image_speed = 0.5;

var xx, yy;

controller = 'keyboard';
if (room = r_title)
{
    selection = 'title versus';
}
if (room = r_options)
{
    selection = 'options graphics';
}
if (room = r_graphics)
{
    selection = 'graphics particles';
}
if (room = r_sounds)
{
    selection = 'sounds master';
}
if (room = r_controls)
{
    selection = 'controls p1 move up';
}
if (room = r_victory)
{
    selection = 'winner rematch';
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controls
if (room = r_title)
{
    if (keyboard_check_pressed(vk_down))
    or (gamepad_button_check_pressed(0,global.p1p_move_down))
    {
        switch(selection)
        {
            case 'title versus':
                with (o_versus)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_tutorial)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'title tutorial';
            break;
            
            case 'title tutorial':
                with (o_tutorial)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'title options';
            break;
            
            case 'title options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_endgame)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'title endgame';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_up))
    or (gamepad_button_check_pressed(0,global.p1p_move_up))
    {
        switch(selection)
        {
            case 'title endgame':
                with (o_endgame)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'title options';
            break;
            
            case 'title options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_tutorial)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'title tutorial';
            break;
            
            case 'title tutorial':
                with (o_tutorial)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_versus)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'title versus';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_enter))
    or (gamepad_button_check_pressed(0,gp_face1))
    {
        switch(selection)
        {
            case 'title versus':
                with (o_versus)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'title tutorial':
                exit;
            break;
            
            case 'title options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'title endgame':
                with (o_endgame)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
        }
    }
}

if (room = r_options)
{
    if (keyboard_check_pressed(vk_down))
    or (gamepad_button_check_pressed(0,global.p1p_move_down))
    {
        switch(selection)
        {
            case 'options graphics':
                selection = 'options sounds';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'options sounds':
                selection = 'options controls';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'options controls':
                with (o_menureturn)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'options return';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_up))
    or (gamepad_button_check_pressed(0,global.p1p_move_up))
    {
        switch(selection)
        {
            case 'options return':
                with (o_menureturn)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                selection = 'options controls';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'options controls':
                selection = 'options sounds';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'options sounds':
                selection = 'options graphics';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_enter))
    or (gamepad_button_check_pressed(0,gp_face1))
    {
        switch(selection)
        {
            case 'options graphics':
                with (o_graphics)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
                instance_destroy();
            break;
            
            case 'options sounds':
                with (o_sounds)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
                instance_destroy();
            break;
            
            case 'options controls':
                with (o_controls)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
                instance_destroy();
            break;
            
            case 'options return':
                with (o_menureturn)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
                instance_destroy();
            break;
        }
    }
}

if (room = r_graphics)
{
    if (keyboard_check_pressed(vk_down))
    or (gamepad_button_check_pressed(0,global.p1p_move_down))
    {
        switch(selection)
        {
            case 'graphics particles':
                selection = 'graphics interface';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics interface':
                selection = 'graphics grid';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics grid':
                selection = 'graphics moveset';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics moveset':
                selection = 'graphics directionals';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics directionals':
                selection = 'graphics coordinates';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics coordinates':
                selection = 'graphics speedometer';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics speedometer':
                selection = 'graphics status';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics status':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'graphics options';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_up))
    or (gamepad_button_check_pressed(0,global.p1p_move_up))
    {
        switch(selection)
        {
            case 'graphics options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                selection = 'graphics status';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics status':
                selection = 'graphics speedometer';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics speedometer':
                selection = 'graphics coordinates';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics coordinates':
                selection = 'graphics directionals';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics directionals':
                selection = 'graphics moveset';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics moveset':
                selection = 'graphics grid';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics grid':
                selection = 'graphics interface';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'graphics interface':
                selection = 'graphics particles';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_enter))
    or (gamepad_button_check_pressed(0,gp_face1))
    {
        switch(selection)
        {
            case 'graphics particles':
                with (o_particles)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics interface':
                with (o_interface)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics grid':
                with (o_grid)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics moveset':
                with (o_moveset)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics directionals':
                with (o_directionals)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics coordinates':
                with (o_coordinates)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics speedometer':
                with (o_speedometer)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics status':
                with (o_status)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'graphics options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
        }
    }
}

if (room = r_sounds)
{
    if (keyboard_check_pressed(vk_down))
    or (gamepad_button_check_pressed(0,global.p1p_move_down))
    {
        switch(selection)
        {
            case 'sounds master':
                selection = 'sounds effect';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'sounds effect':
                selection = 'sounds voice';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'sounds voice':
                selection = 'sounds music';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'sounds music':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'sounds options';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_up))
    or (gamepad_button_check_pressed(0,global.p1p_move_up))
    {
        switch(selection)
        {
            case 'sounds options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                selection = 'sounds music';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'sounds music':
                selection = 'sounds voice';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'sounds voice':
                selection = 'sounds effect';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
            
            case 'sounds effect':
                selection = 'sounds master';
                d = audio_play_sound_on(emit,f_select,false,10);
            break;
        }
    }
    
    if (keyboard_check(vk_right))
    or (gamepad_button_check(0,global.p1p_move_right))
    {
        switch(selection)
        {
            case 'sounds master':
                with (o_soundslide_master)
                {
                    if (percentage &lt; 100)
                    {
                        percentage += 1;
                        x += 2;
                    }
                }
            break;
            
            case 'sounds effect':
                with (o_soundslide_effect)
                {
                    if (percentage &lt; 100)
                    {
                        percentage += 1;
                        x += 2;
                    }
                }
            break;
            
            case 'sounds voice':
                with (o_soundslide_voice)
                {
                    if (percentage &lt; 100)
                    {
                        percentage += 1;
                        x += 2;
                    }
                }
            break;
            
            case 'sounds music':
                with (o_soundslide_music)
                {
                    if (percentage &lt; 100)
                    {
                        percentage += 1;
                        x += 2;
                    }
                }
            break;
        }
    }
    
    if (keyboard_check(vk_left))
    or (gamepad_button_check(0,global.p1p_move_left))
    {
        switch(selection)
        {
            case 'sounds master':
                with (o_soundslide_master)
                {
                    if (percentage &gt; 0)
                    {
                        percentage -= 1;
                        x -= 2;
                    }
                }
            break;
            
            case 'sounds effect':
                with (o_soundslide_effect)
                {
                    if (percentage &gt; 0)
                    {
                        percentage -= 1;
                        x -= 2;
                    }
                }
            break;
            
            case 'sounds voice':
                with (o_soundslide_voice)
                {
                    if (percentage &gt; 0)
                    {
                        percentage -= 1;
                        x -= 2;
                    }
                }
            break;
            
            case 'sounds music':
                with (o_soundslide_music)
                {
                    if (percentage &gt; 0)
                    {
                        percentage -= 1;
                        x -= 2;
                    }
                }
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_enter))
    or (gamepad_button_check_pressed(0,gp_face1))
    {
        switch(selection)
        {
            case 'sounds options':
                with (o_options)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
        }
    }
}

if (room = r_controls)
{
    if (instance_exists(o_keycontrol))
    {
        exit;
    }
    else if not(instance_exists(o_keycontrol))
    {
        if (keyboard_check_pressed(vk_down))
        or (gamepad_button_check_pressed(0,global.p1p_move_down))
        {
            switch(selection)
            {
                case 'controls p1 move up':
                    selection = 'controls p1 move left';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move left':
                    selection = 'controls p1 move down';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move down':
                    selection = 'controls p1 move right';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move right':
                    selection = 'controls p1 dash';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 dash':
                    selection = 'controls p1 skilla';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skilla':
                    selection = 'controls p1 skillb';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skillb':
                    selection = 'controls p1 skillc';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skillc':
                    selection = 'controls p1 switch';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 switch':
                    selection = 'controls p1 guard';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 guard':
                    with (o_options)
                    {
                        event_perform(ev_mouse,ev_mouse_enter);
                    }
                    selection = 'controls options';
                break;
                
                
                case 'controls p2 move up':
                    selection = 'controls p2 move left';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move left':
                    selection = 'controls p2 move down';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move down':
                    selection = 'controls p2 move right';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move right':
                    selection = 'controls p2 dash';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 dash':
                    selection = 'controls p2 skilla';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skilla':
                    selection = 'controls p2 skillb';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skillb':
                    selection = 'controls p2 skillc';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skillc':
                    selection = 'controls p2 switch';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 switch':
                    selection = 'controls p2 guard';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 guard':
                    with (o_options)
                    {
                        event_perform(ev_mouse,ev_mouse_enter);
                    }
                    selection = 'controls options';
                break;
            }
        }
        
        if (keyboard_check_pressed(vk_up))
        or (gamepad_button_check_pressed(0,global.p1p_move_up))
        {
            switch(selection)
            {
                case 'controls options':
                    with (o_options)
                    {
                        event_perform(ev_mouse,ev_mouse_leave);
                    }
                    selection = 'controls p1 guard';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 guard':
                    selection = 'controls p1 switch';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 switch':
                    selection = 'controls p1 skillc';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skillc':
                    selection = 'controls p1 skillb';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skillb':
                    selection = 'controls p1 skilla';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skilla':
                    selection = 'controls p1 dash';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 dash':
                    selection = 'controls p1 move right';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move right':
                    selection = 'controls p1 move down';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move down':
                    selection = 'controls p1 move left';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move left':
                    selection = 'controls p1 move up';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                
                case 'controls p2 guard':
                    selection = 'controls p2 switch';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 switch':
                    selection = 'controls p2 skillc';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skillc':
                    selection = 'controls p2 skillb';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skillb':
                    selection = 'controls p2 skilla';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skilla':
                    selection = 'controls p2 dash';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 dash':
                    selection = 'controls p2 move right';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move right':
                    selection = 'controls p2 move down';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move down':
                    selection = 'controls p2 move left';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move left':
                    selection = 'controls p2 move up';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
            }
        }
        
        if (keyboard_check_pressed(vk_right))
        or (gamepad_button_check_pressed(0,global.p1p_move_right))
        {
            switch(selection)
            {
                case 'controls p1 move up':
                    selection = 'controls p2 move up';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move left':
                    selection = 'controls p2 move left';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move down':
                    selection = 'controls p2 move down';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 move right':
                    selection = 'controls p2 move right';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 dash':
                    selection = 'controls p2 dash';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skilla':
                    selection = 'controls p2 skilla';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skillb':
                    selection = 'controls p2 skillb';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 skillc':
                    selection = 'controls p2 skillc';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 switch':
                    selection = 'controls p2 switch';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p1 guard':
                    selection = 'controls p2 guard';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
            }
        }
        
        if (keyboard_check_pressed(vk_left))
        or (gamepad_button_check_pressed(0,global.p1p_move_left))
        {
            switch(selection)
            {
                case 'controls p2 move up':
                    selection = 'controls p1 move up';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move left':
                    selection = 'controls p1 move left';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move down':
                    selection = 'controls p1 move down';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 move right':
                    selection = 'controls p1 move right';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 dash':
                    selection = 'controls p1 dash';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skilla':
                    selection = 'controls p1 skilla';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skillb':
                    selection = 'controls p1 skillb';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 skillc':
                    selection = 'controls p1 skillc';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 switch':
                    selection = 'controls p1 switch';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
                
                case 'controls p2 guard':
                    selection = 'controls p1 guard';
                d = audio_play_sound_on(emit,f_select,false,10);
                break;
            }
        }
    }
}

if (room = r_victory)
{
    if (keyboard_check_pressed(vk_down))
    or (gamepad_button_check_pressed(0,global.p1p_move_down))
    {
        switch(selection)
        {
            case 'winner rematch':
                with (o_rematch)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_newsetup)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'winner newsetup';
            break;
            
            case 'winner newsetup':
                with (o_newsetup)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_menureturn2)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'winner return';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_up))
    or (gamepad_button_check_pressed(0,global.p1p_move_up))
    {
        switch(selection)
        {
            case 'winner return':
                with (o_menureturn2)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_newsetup)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'winner newsetup';
            break;
            
            case 'winner newsetup':
                with (o_newsetup)
                {
                    event_perform(ev_mouse,ev_mouse_leave);
                }
                with (o_rematch)
                {
                    event_perform(ev_mouse,ev_mouse_enter);
                }
                selection = 'winner rematch';
            break;
        }
    }
    
    if (keyboard_check_pressed(vk_enter))
    or (gamepad_button_check_pressed(0,gp_face1))
    {
        switch(selection)
        {
            case 'winner rematch':
                with (o_rematch)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'winner newsetup':
                with (o_newsetup)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
            
            case 'winner return':
                with (o_menureturn2)
                {
                    event_perform(ev_mouse,ev_left_press);
                }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///placement
if (room = r_title)
{
    if (selection = 'title versus')
    {
        xx = o_versus.x;
        yy = o_versus.y;
    }
    if (selection = 'title tutorial')
    {
        xx = o_tutorial.x;
        yy = o_tutorial.y;
    }
    if (selection = 'title options')
    {
        xx = o_options.x;
        yy = o_options.y;
    }
    if (selection = 'title endgame')
    {
        xx = o_endgame.x;
        yy = o_endgame.y;
    }
}

if (room = r_options)
{
    if (selection = 'options graphics')
    {
        xx = o_graphics.x-100;
        yy = o_graphics.y;
    }
    if (selection = 'options sounds')
    {
        xx = o_sounds.x-100;
        yy = o_sounds.y;
    }
    if (selection = 'options controls')
    {
        xx = o_controls.x-100;
        yy = o_controls.y;
    }
    if (selection = 'options return')
    {
        xx = o_menureturn.x;
        yy = o_menureturn.y;
    }
}

if (room = r_graphics)
{
    if (selection = 'graphics particles')
    {
        xx = o_particles.x;
        yy = o_particles.y;
    }
    if (selection = 'graphics interface')
    {
        xx = o_interface.x;
        yy = o_interface.y;
    }
    if (selection = 'graphics grid')
    {
        xx = o_grid.x;
        yy = o_grid.y;
    }
    if (selection = 'graphics moveset')
    {
        xx = o_moveset.x;
        yy = o_moveset.y;
    }
    if (selection = 'graphics directionals')
    {
        xx = o_directionals.x;
        yy = o_directionals.y;
    }
    if (selection = 'graphics coordinates')
    {
        xx = o_coordinates.x;
        yy = o_coordinates.y;
    }
    if (selection = 'graphics speedometer')
    {
        xx = o_speedometer.x;
        yy = o_speedometer.y;
    }
    if (selection = 'graphics status')
    {
        xx = o_status.x;
        yy = o_status.y;
    }
    if (selection = 'graphics options')
    {
        xx = o_options.x;
        yy = o_options.y;
    }
}

if (room = r_sounds)
{
    if (selection = 'sounds master')
    {
        xx = o_soundnames.x;
        yy = o_soundnames.y-27;
    }
    if (selection = 'sounds effect')
    {
        xx = o_soundnames.x;
        yy = o_soundnames.y-9;
    }
    if (selection = 'sounds voice')
    {
        xx = o_soundnames.x;
        yy = o_soundnames.y+9;
    }
    if (selection = 'sounds music')
    {
        xx = o_soundnames.x;
        yy = o_soundnames.y+27;
    }
    if (selection = 'sounds options')
    {
        xx = o_options.x;
        yy = o_options.y;
    }
}

if (room = r_controls)
{
    if (selection = 'controls p1 move up')
    {
        xx = o_key_up_p1.x;
        yy = o_key_up_p1.y;
    }
    if (selection = 'controls p1 move left')
    {
        xx = o_key_left_p1.x;
        yy = o_key_left_p1.y;
    }
    if (selection = 'controls p1 move down')
    {
        xx = o_key_down_p1.x;
        yy = o_key_down_p1.y;
    }
    if (selection = 'controls p1 move right')
    {
        xx = o_key_right_p1.x;
        yy = o_key_right_p1.y;
    }
    if (selection = 'controls p1 dash')
    {
        xx = o_key_dash_p1.x;
        yy = o_key_dash_p1.y;
    }
    if (selection = 'controls p1 skilla')
    {
        xx = o_key_skilla_p1.x;
        yy = o_key_skilla_p1.y;
    }
    if (selection = 'controls p1 skillb')
    {
        xx = o_key_skillb_p1.x;
        yy = o_key_skillb_p1.y;
    }
    if (selection = 'controls p1 skillc')
    {
        xx = o_key_skillc_p1.x;
        yy = o_key_skillc_p1.y;
    }
    if (selection = 'controls p1 switch')
    {
        xx = o_key_switch_p1.x;
        yy = o_key_switch_p1.y;
    }
    if (selection = 'controls p1 guard')
    {
        xx = o_key_guard_p1.x;
        yy = o_key_guard_p1.y;
    }
    
    if (selection = 'controls p2 move up')
    {
        xx = o_key_up_p2.x;
        yy = o_key_up_p2.y;
    }
    if (selection = 'controls p2 move left')
    {
        xx = o_key_left_p2.x;
        yy = o_key_left_p2.y;
    }
    if (selection = 'controls p2 move down')
    {
        xx = o_key_down_p2.x;
        yy = o_key_down_p2.y;
    }
    if (selection = 'controls p2 move right')
    {
        xx = o_key_right_p2.x;
        yy = o_key_right_p2.y;
    }
    if (selection = 'controls p2 dash')
    {
        xx = o_key_dash_p2.x;
        yy = o_key_dash_p2.y;
    }
    if (selection = 'controls p2 skilla')
    {
        xx = o_key_skilla_p2.x;
        yy = o_key_skilla_p2.y;
    }
    if (selection = 'controls p2 skillb')
    {
        xx = o_key_skillb_p2.x;
        yy = o_key_skillb_p2.y;
    }
    if (selection = 'controls p2 skillc')
    {
        xx = o_key_skillc_p2.x;
        yy = o_key_skillc_p2.y;
    }
    if (selection = 'controls p2 switch')
    {
        xx = o_key_switch_p2.x;
        yy = o_key_switch_p2.y;
    }
    if (selection = 'controls p2 guard')
    {
        xx = o_key_guard_p2.x;
        yy = o_key_guard_p2.y;
    }
    
    if (selection = 'controls options')
    {
        xx = o_options.x;
        yy = o_options.y;
    }
}

if (room = r_victory)
{
    if (selection = 'winner rematch')
    {
        xx = o_rematch.x;
        yy = o_rematch.y;
    }
    if (selection = 'winner newsetup')
    {
        xx = o_newsetup.x;
        yy = o_newsetup.y;
    }
    if (selection = 'winner return')
    {
        xx = o_menureturn2.x;
        yy = o_menureturn2.y;
    }
}

x -= (x - xx)*0.25;
y -= (y - yy)*0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
